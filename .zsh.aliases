alias v='nvim'

# Edit configuration aliases
alias zshrc="nvim ~/.zshrc"
alias zshaliases="nvim ~/.zsh.aliases"
alias zshfunctions="nvim ~/.zsh.functions"
alias zshlocal="nvim ~/.zsh.local"
alias ohmyzsh="nvim ~/.oh-my-zsh"
alias vimrc="nvim ~/.config/nvim/"

alias bat="bat --theme gruvbox-dark"
alias o="bat"

alias showPID='(){ps aux | grep -i $1 | grep -v grep | cut -f7 -d " " ;}'

alias cbr='git branch --sort=-committerdate | fzf --header "Checkout Recent Branch" --preview "git diff {1} --color=always" --pointer="îˆ " | xargs git checkout'

alias ls='eza --color=always --icons=always --git'
alias l='ls -la'
alias la='ls -laa'
alias ll='ls -l'
alias lt='ls --tree -l'
alias cls='clear&&ls'

# go up aliases
alias .='pwd'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

# gulc -- git undo last commit but preserve the changes
alias gulc="git reset --soft HEAD~"
alias undolastcommit='git reset --soft HEAD~'
alias lg='lazygit'
alias gwl='git worktree list'
alias bb='echo "Running brew bundle..."; brew bundle -q && brew bundle cleanup -q && echo "Done!"'
alias be='nvim $HOMEBREW_BUNDLE_FILE'
alias bbu='brew bundle upgrade'
alias bbi='brew bundle install'
alias bbc='brew bundle cleanup'
alias bbuc='brew bundle upgrade && brew bundle cleanup'

alias flutter='flutter --no-version-check'
alias flutterrebuild='fvm flutter clean && fvm flutter pub get && fvm dart run build_runner build --delete-conflicting-outputs'
alias fbb='fvm flutter build bundle'
alias updatelocales='fvm dart run easy_localization:generate --source-dir assets/translations --output-dir lib/generated/localization && fvm dart run easy_localization:generate -f keys --source-dir ./assets/translations --output-file localization/locale_keys.g.dart'
alias updatecoreandlz='fvm dart run dev_tools:install_core_and_lz'
alias checkdartformat='find . -name "*.dart" ! -name "*.g.dart" ! -name "*.freezed.dart" | xargs dart format --line-length 120'

# qmake aliases
alias qmake_configure_sse29x_release="~/Qt/5.15.10/macos/bin/qmake ../Dev/Dev.pro CONFIG+=arm64 -spec macx-clang CONFIG+=c++17"
alias qmake_configure_sse29x_debug="~/Qt/5.15.10/macos/bin/qmake ../Dev/Dev.pro CONFIG+=arm64 -spec macx-clang CONFIG+=c++17 CONFIG+=debug"
alias qmake_build_sse29x="make -j10"
# CONFIG+=debug CONFIG+=qml_debug CONFIG-=seperate_debug_info
# -d increases debug level

# Configure and Build aliases
alias cmake_configure_preset='cmake --preset=$(cmake --list-presets | tail -n +3 | fzf | cut -d '\''"'\'' -f2)'
alias cmake_build_preset='cmake --build --preset=$(cmake --list-presets=build | tail -n +3 | fzf | cut -d '\''"'\'' -f2) $@'
alias cmake_build_preset_with_target='cmake --build --preset=$(cmake --list-presets=build | tail -n +3 | fzf | cut -d '\''"'\'' -f2) --target=$(rg add_custom_target -g '!ExternalLibs/' -I -N | sed "s/add_custom_target(//g" | sed "s/ //g" | sed "s/)//g" | sort | uniq | fzf)'


if [[ "$OSTYPE" == "win32" ]] then
    alias dotfiles='cd C:\\Repos\\dotfiles'
else
    alias dotfiles='cd ~/Repos/dotfiles'
    alias vimwiki='nvim ~/Repos/vimwiki/index.md'
fi

if [[ "$OSTYPE" == "linux" ]] then
    alias open="xdg-open"
fi

alias fman='compgen -c | fzf | xargs man'

# Check if the shell is interactive
if [[ $- == *i* ]]; then
    # Define a zle widget for the cdi command
    cdi_widget() {
        BUFFER="cdi"
        zle accept-line
    }
    zle -N cdi_widget

    # Bind Ctrl+f to the cdi_widget
    bindkey '^f' cdi_widget
fi
